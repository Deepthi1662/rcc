 org.hibernate.query.SemanticException: Missing constructor for type 'LiabilitiesDTO' [SELECT new com.kotak.reliability.entity.LiabilitiesDTO((SELECT ca FROM CaDetails ca WHERE ca.crn = :crn),(SELECT sa FROM SaDetails sa WHERE sa.crn = :crn))]


 Map<String, Pair<BigDecimal, BigDecimal>> rvValues = Map.of(
                CA_AMB, Pair.of(rvRelationshipDetails.getCaAmbFamilyRv(), rvRelationshipDetails.getCaAmbFamilyRv()),
                SA_AMB, Pair.of(rvRelationshipDetails.getSaAmbIndividualRv(), rvRelationshipDetails.getSaAmbFamilyRv()),
                TD_EOP, Pair.of(rvRelationshipDetails.getTdEopIndividualRv(), rvRelationshipDetails.getTdEopFamilyRv()),
                MF_AUM, Pair.of(rvRelationshipDetails.getMfAumIndividualRv(), rvRelationshipDetails.getMfAumFamilyRv()),
                MF_OTHERS, Pair.of(rvRelationshipDetails.getMfOthersIndividualRv(), rvRelationshipDetails.getMfOthersFamilyRv()),
                INSURANCE, Pair.of(rvRelationshipDetails.getInsuranceIndividualRv(), rvRelationshipDetails.getInsuranceFamilyRv()),
                SANCTION_30, Pair.of(rvRelationshipDetails.getSanction30IndividualRv(), rvRelationshipDetails.getSanction30FamilyRv()),
                DEMAT_30, Pair.of(rvRelationshipDetails.getDemat30IndividualRv(), rvRelationshipDetails.getDemat30FamilyRv())
        );



Description:

Parameter 0 of constructor in com.kotak.reliability.service.impl.CustomerServiceImpl required a bean of type 'com.kotak.reliability.repository.LiabilitiesRepository' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.kotak.reliability.repository.LiabilitiesRepository' in your configuration.


Process finished with exit code 1






SELECT  (
	(SELECT ca FROM rel.ca_details ca WHERE ca.crn = '98251983'),
    (SELECT sa FROM rel.sa_details sa WHERE sa.crn = '98251983')
);

WITH ca_details_cte AS (
    SELECT * FROM rel.ca_details WHERE crn = '98251983'
),
sa_details_cte AS (
    SELECT * FROM rel.sa_details WHERE crn = '98251983'
)
SELECT
    ca.*, 
    sa.*
FROM
    ca_details_cte ca
LEFT JOIN
    sa_details_cte sa ON ca.crn = sa.crn
UNION
SELECT
    ca.*, 
    sa.*
FROM
    sa_details_cte sa
LEFT JOIN
    ca_details_cte ca ON ca.crn = sa.crn;



@Query("SELECT new com.kotak.reliability.entity.LiabilitiesDTO(" +
            "(SELECT ca FROM CaDetails ca WHERE ca.crn = :crn)," +
            "(SELECT sa FROM SaDetails sa WHERE sa.crn = :crn))"
            )
    Optional<LiabilitiesDTO> findLiabilitiesDataByCrn(@Param("crn") String crn);


INSERT INTO rel.sa_details (
    SA_ID, CRN, NUMBER_OF_SA, TOTAL_SA_BAL, ACCOUNT_NUM, PRODUCT_TYPE, PRODUCT_CODE,
    BRANCH_CODE, LOB_CODE, ACCOUNT_OPEN_DATE, CURR_MONTH_BAL, PREV_MONTH_BAL,
    MONTH2_BAL, MONTH3_BAL, FYEND_BAL, LASTFY_BAL, Q1_AQB, Q2_AQB, Q3_AQB, Q4_AQB,
    BCIF_LG, FINCODLOB, BCIF_LC, FLEX_LC, BCIF_RM, FLEX_LG, CREATED_BY, CREATED_ON,
    UPDATED_BY, UPDATED_ON
)
VALUES
    (1, '98251983', 1, 1000000.00, 'ACC123456789', 'SAVINGS', 'SAV01', 'BR001', 'LOB001',
    CURRENT_TIMESTAMP, 500000.00, 450000.00, 480000.00, 490000.00, 510000.00, 470000.00,
    100000.00, 150000.00, 200000.00, 180000.00, 'LG001', 'FIN001', 'LC001', 'FLC001',
    'RM001', 'LG002', 'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP),

    (2, '98251983', 2, 2000000.00, 'ACC987654321', 'SAVINGS', 'SAV02', 'BR002', 'LOB002',
    CURRENT_TIMESTAMP, 1000000.00, 900000.00, 950000.00, 980000.00, 1000000.00, 940000.00,
    200000.00, 300000.00, 250000.00, 270000.00, 'LG002', 'FIN002', 'LC002', 'FLC002',
    'RM002', 'LG003', 'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP);


-- Insert data into ca_details table
INSERT INTO rel.ca_details (
    CA_ID, CRN, NUMBER_OF_CA, TOTAL_CA_BAL, ACCOUNT_NUM, PRODUCT_TYPE, PRODUCT_CODE,
    BRANCH_CODE, LOB_CODE, ACCOUNT_OPEN_DATE, CURR_MONTH_BAL, PREV_MONTH_BAL,
    MONTH2_BAL, MONTH3_BAL, FYEND_BAL, LASTFY_BAL, Q1_AQB, Q2_AQB, Q3_AQB, Q4_AQB,
    BCIF_LG, FINCODLOB, BCIF_LC, FLEX_LC, BCIF_RM, FLEX_LG, CREATED_BY, CREATED_ON,
    UPDATED_BY, UPDATED_ON
)
VALUES
    (1, '98251983', 1, 1200000.00, 'ACC234567890', 'CURRENT', 'CUR01', 'BR003', 'LOB003',
    CURRENT_TIMESTAMP, 600000.00, 550000.00, 580000.00, 590000.00, 620000.00, 570000.00,
    150000.00, 200000.00, 250000.00, 230000.00, 'LG003', 'FIN003', 'LC003', 'FLC003',
    'RM003', 'LG004', 'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP),

    (2, '98251983', 2, 2500000.00, 'ACC765432109', 'CURRENT', 'CUR02', 'BR004', 'LOB004',
    CURRENT_TIMESTAMP, 1100000.00, 950000.00, 1000000.00, 1050000.00, 1100000.00, 980000.00,
    300000.00, 400000.00, 350000.00, 370000.00, 'LG004', 'FIN004', 'LC004', 'FLC004',
    'RM004', 'LG005', 'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP);


package com.kotak.reliability.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.ArrayList;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class LiabilitiesDTO {

    private List<CaDetails> caDetails;
    private List<SaDetails> saDetails;
}




package com.kotak.reliability.entity;

import javax.persistence.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "td_details")
public class TDDetails {

    @Column(name = "NUMBER_OF_TD", nullable = false)
    private Integer numberOfTd;

    @Column(name = "TOTAL_TD_BAL", nullable = false)
    private BigDecimal totalTdBal;

    @Id
    @Column(name = "CRN", nullable = false)
    private String crn;

    @Column(name = "MONTH_ID", nullable = false)
    private Integer monthId;

    @Column(name = "ACCOUNT_NO", nullable = false)
    private String accountNo;

    @Column(name = "PRODUCT_CODE", nullable = false)
    private String productCode;

    @Column(name = "PRODUCT_CATEGORY", nullable = false)
    private String productCategory;

    @Column(name = "BRANCH_CODE", nullable = false)
    private String branchCode;

    @Column(name = "LOB_CODE", nullable = false)
    private String lobCode;

    @Column(name = "VALUE_DATE", nullable = false)
    private LocalDateTime valueDate;

    @Column(name = "OPEN_DATE", nullable = false)
    private LocalDateTime openDate;

    @Column(name = "DEPOSIT_DATE", nullable = false)
    private LocalDateTime depositDate;

    @Column(name = "INITIAL_DEP_AMT", nullable = false)
    private BigDecimal initialDepAmt;

    @Column(name = "CURR_BALANCE", nullable = false)
    private BigDecimal currBalance;

    @Column(name = "MATURITY_DATE", nullable = false)
    private LocalDateTime maturityDate;

    @Column(name = "BCIF_LG", nullable = false)
    private String bcifLg;

    @Column(name = "FLEX_LG", nullable = false)
    private String flexLg;

    @Column(name = "BCIF_LC", nullable = false)
    private String bcifLc;

    @Column(name = "FLEX_LC", nullable = false)
    private String flexLc;

    @Column(name = "BCIF_RM", nullable = false)
    private String bcifRm;

    @Column(name = "IS_ONLINE", nullable = false)
    private Integer isOnline;

    @Column(name = "PEAK_TD", nullable = false)
    private BigDecimal peakTd;

    @Column(name = "CREATED_BY", nullable = false)
    private String createdBy;

    @Column(name = "CREATED_ON", nullable = false)
    private LocalDateTime createdOn;

    @Column(name = "UPDATED_BY", nullable = false)
    private String updatedBy;

    @Column(name = "UPDATED_ON", nullable = false)
    private LocalDateTime updatedOn;
}


package com.kotak.reliability.entity;

import javax.persistence.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "credit_card_details")
public class CreditCardDetails {

    @Column(name = "NUMBER_OF_CC", nullable = false)
    private Integer numberOfCc;

    @Column(name = "TOTAL_LIMIT", nullable = false)
    private BigDecimal totalLimit;

    @Column(name = "INDV_LIMIT", nullable = false)
    private BigDecimal indivLimit;

    @Id
    @Column(name = "CRN", nullable = false)
    private String crn;

    @Column(name = "UTILIZED_LIMIT", nullable = false)
    private BigDecimal utilizedLimit;

    @Column(name = "CURRENT_BALANCE", nullable = false)
    private BigDecimal currentBalance;

    @Column(name = "CARD_OPEN_DATE", nullable = false)
    private LocalDateTime cardOpenDate;

    @Column(name = "CARD_TYPE", nullable = false)
    private String cardType;

    @Column(name = "CARD_STATUS", nullable = false)
    private String cardStatus;

    @Column(name = "PAYMENT_CYCLE", nullable = false)
    private Integer paymentCycle;

    @Column(name = "CREATED_BY", nullable = false)
    private String createdBy;

    @Column(name = "CREATED_ON", nullable = false)
    private LocalDateTime createdOn;

    @Column(name = "UPDATED_BY", nullable = false)
    private String updatedBy;

    @Column(name = "UPDATED_ON", nullable = false)
    private LocalDateTime updatedOn;
}

-- Insert dummy data into td_details table
INSERT INTO rel.td_details (
    NUMBER_OF_TD, TOTAL_TD_BAL, CRN, MONTH_ID, ACCOUNT_NO, PRODUCT_CODE, 
    PRODUCT_CATEGORY, BRANCH_CODE, LOB_CODE, VALUE_DATE, OPEN_DATE, 
    DEPOSIT_DATE, INITIAL_DEP_AMT, CURR_BALANCE, MATURITY_DATE, BCIF_LG, 
    FLEX_LG, BCIF_LC, FLEX_LC, BCIF_RM, IS_ONLINE, PEAK_TD, CREATED_BY, 
    CREATED_ON, UPDATED_BY, UPDATED_ON
)
VALUES
    (1, 10000000.00, '98251983', 5, 'ACC123456789', 'TD01', 'SAVINGS', 
     'BR001', 'LOB001', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
     500000.00, 2000000.00, CURRENT_TIMESTAMP, 'LG001', 'FLEX_LG001', 'LC001', 
     'FLC001', 'RM001', 1, 2500000.00, 'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP),

    (2, 15000000.00, '98251983', 6, 'ACC987654321', 'TD02', 'FIXED', 
     'BR002', 'LOB002', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
     1000000.00, 3500000.00, CURRENT_TIMESTAMP, 'LG002', 'FLEX_LG002', 'LC002', 
     'FLC002', 'RM002', 0, 4000000.00, 'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP);


-- Insert dummy data into credit_card_details table
INSERT INTO rel.credit_card_details (
    NUMBER_OF_CC, TOTAL_LIMIT, INDV_LIMIT, CRN, UTILIZED_LIMIT, CURRENT_BALANCE, 
    CARD_OPEN_DATE, CARD_TYPE, CARD_STATUS, PAYMENT_CYCLE, CREATED_BY, CREATED_ON, 
    UPDATED_BY, UPDATED_ON
)
VALUES
    (1, 100000.00, 50000.00, '98251983', 20000.00, 50000.00, 
     CURRENT_TIMESTAMP, 'VISA', 'ACTIVE', 30, 'admin', CURRENT_TIMESTAMP, 
     'admin', CURRENT_TIMESTAMP),

    (2, 200000.00, 100000.00, '98251983', 50000.00, 150000.00, 
     CURRENT_TIMESTAMP, 'MASTER', 'BLOCKED', 45, 'admin', CURRENT_TIMESTAMP, 
     'admin', CURRENT_TIMESTAMP);


package com.kotak.reliability.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import java.math.BigDecimal;
import java.sql.Timestamp;

package com.kotak.reliability.entity;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.sql.Timestamp;

@Entity
@Table(name = "asset_details", schema = "rel")
public class AssetDetails {

    @Id
    @Column(name = "CRN", nullable = false)
    private String crn;

    @Column(name = "MONTH_ID", nullable = false)
    private Integer monthId;

    @Column(name = "TYPE_OF_ASSET", nullable = false)
    private String typeOfAsset;

    @Column(name = "NUMBER_OF_ASSET", nullable = false)
    private Integer numberOfAsset;

    @Column(name = "SANCTIONED_AAMOUNT", nullable = false)
    private BigDecimal sanctionedAmount;

    @Column(name = "TOTAL_OUTSTANDING_BAL", nullable = false)
    private BigDecimal totalOutstandingBalance;

    @Column(name = "ACCOUNT_NUM", nullable = false)
    private String accountNum;

    @Column(name = "INTEREST_RATE", nullable = false)
    private Integer interestRate;

    @Column(name = "DISBURSED_AMT", nullable = false)
    private BigDecimal disbursedAmount;

    @Column(name = "LEGAL_CHARGES", nullable = false)
    private BigDecimal legalCharges;

    @Column(name = "NUMBER_OF_EMI_OUTSTANDING", nullable = false)
    private Integer numberOfEmiOutstanding;

    @Column(name = "SOH_BALANCE", nullable = false)
    private BigDecimal sohBalance;

    @Column(name = "NUMBER_OF_BOUNCES", nullable = false)
    private Integer numberOfBounces;

    @Column(name = "CREATED_BY", nullable = false)
    private String createdBy;

    @Column(name = "CREATED_ON", nullable = false)
    private Timestamp createdOn;

    @Column(name = "UPDATED_BY", nullable = false)
    private String updatedBy;

    @Column(name = "UPDATED_ON", nullable = false)
    private Timestamp updatedOn;

    // Getters and Setters (can be generated with Lombok or manually added)

}


INSERT INTO rel.asset_details (
    CRN, MONTH_ID, TYPE_OF_ASSET, NUMBER_OF_ASSET, SANCTIONED_AAMOUNT, TOTAL_OUTSTANDING_BAL,
    ACCOUNT_NUM, INTEREST_RATE, DISBURSED_AMT, LEGAL_CHARGES, NUMBER_OF_EMI_OUTSTANDING, 
    SOH_BALANCE, NUMBER_OF_BOUNCES, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON
)
VALUES
    ('98251983', 1, 'LOAN', 3, 500000.00, 450000.00, 'ACC123456789', 7, 200000.00, 5000.00, 12, 
    30000.00, 2, 'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP),
    
    ('98251983', 2, 'MORTGAGE', 5, 1000000.00, 850000.00, 'ACC987654321', 5, 450000.00, 8000.00, 15, 
    45000.00, 1, 'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP),
    
    ('98251983', 3, 'PERSONAL', 2, 300000.00, 250000.00, 'ACC234567890', 10, 150000.00, 4000.00, 8, 
    15000.00, 3, 'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP);


package com.kotak.reliability.entity;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.sql.Timestamp;

@Entity
@Table(name = "mf_details", schema = "rel")
public class MfDetails {

    @Id
    @Column(name = "CRN", nullable = false)
    private String crn;

    @Column(name = "NUMBER_OF_MF", nullable = false)
    private Integer numberOfMf;

    @Column(name = "TOTAL_BALANCE", nullable = false)
    private BigDecimal totalBalance;

    @Column(name = "FOLIO_NO", nullable = false)
    private String folioNo;

    @Column(name = "PRODUCT_NAME", nullable = false)
    private String productName;

    @Column(name = "AMC_CODE", nullable = false)
    private String amcCode;

    @Column(name = "AMT_PURCHASED", nullable = false)
    private BigDecimal amtPurchased;

    @Column(name = "UNITS_PURCHASED", nullable = false)
    private BigDecimal unitsPurchased;

    @Column(name = "AMT_REDEMPTION", nullable = false)
    private BigDecimal amtRedemption;

    @Column(name = "UNITS_REDEEMED", nullable = false)
    private BigDecimal unitsRedeemed;

    @Column(name = "NET_UNITS", nullable = false)
    private BigDecimal netUnits;

    @Column(name = "AUM", nullable = false)
    private BigDecimal aum;

    @Column(name = "PROFIT_LOSS", nullable = false)
    private BigDecimal profitLoss;

    @Column(name = "CREATED_BY", nullable = false)
    private String createdBy;

    @Column(name = "CREATED_ON", nullable = false)
    private Timestamp createdOn;

    @Column(name = "UPDATED_BY", nullable = false)
    private String updatedBy;

    @Column(name = "UPDATED_ON", nullable = false)
    private Timestamp updatedOn;

    // Getters and setters can be generated by Lombok or manually added if needed
}

package com.kotak.reliability.entity;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.sql.Timestamp;

@Entity
@Table(name = "mf_details_others", schema = "rel")
public class MfDetailsOthers {

    @Id
    @Column(name = "CRN", nullable = false)
    private String crn;

    @Column(name = "NUMBER_OF_MF", nullable = false)
    private Integer numberOfMf;

    @Column(name = "TOTAL_BALANCE", nullable = false)
    private BigDecimal totalBalance;

    @Column(name = "CODE", nullable = false)
    private String code;

    @Column(name = "COD_PRODUCT", nullable = false)
    private String codProduct;

    @Column(name = "NM_SCHEME", nullable = false)
    private String nmScheme;

    @Column(name = "AMOUNT", nullable = false)
    private BigDecimal amount;

    @Column(name = "SOP_PERCENT", nullable = false)
    private String sopPercent;

    @Column(name = "CREATED_BY", nullable = false)
    private String createdBy;

    @Column(name = "CREATED_ON", nullable = false)
    private Timestamp createdOn;

    @Column(name = "UPDATED_BY", nullable = false)
    private String updatedBy;

    @Column(name = "UPDATED_ON", nullable = false)
    private Timestamp updatedOn;

    // Getters and setters can be generated by Lombok or manually added if needed
}

package com.kotak.reliability.entity;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.sql.Timestamp;

@Entity
@Table(name = "insurance_details", schema = "rel")
public class InsuranceDetails {

    @Id
    @Column(name = "CRN", nullable = false)
    private String crn;

    @Column(name = "NUMBER_OF_INS", nullable = false)
    private Integer numberOfIns;

    @Column(name = "CURR_BALANCE", nullable = false)
    private BigDecimal currBalance;

    @Column(name = "PDR_DT", nullable = false)
    private Timestamp pdrDate;

    @Column(name = "POLICY_NUMBER", nullable = false)
    private String policyNumber;

    @Column(name = "PRODUCT", nullable = false)
    private String product;

    @Column(name = "PRODUCT_DESCRIPTION", nullable = false)
    private String productDescription;

    @Column(name = "SUM_ASSURED", nullable = false)
    private BigDecimal sumAssured;

    @Column(name = "BASIC_CPI", nullable = false)
    private BigDecimal basicCpi;

    @Column(name = "TERM", nullable = false)
    private Integer term;

    @Column(name = "PREMIUM_PAYING_TERM", nullable = false)
    private Integer premiumPayingTerm;

    @Column(name = "PREMIUM_LTD_WITHOUT_ST", nullable = false)
    private BigDecimal premiumLtdWithoutSt;

    @Column(name = "CREATED_BY", nullable = false)
    private String createdBy;

    @Column(name = "CREATED_ON", nullable = false)
    private Timestamp createdOn;

    @Column(name = "UPDATED_BY", nullable = false)
    private String updatedBy;

    @Column(name = "UPDATED_ON", nullable = false)
    private Timestamp updatedOn;

    // Getters and setters can be generated by Lombok or manually added if needed
}

-- Inserting data into mf_details table
INSERT INTO rel.mf_details (
    CRN, NUMBER_OF_MF, TOTAL_BALANCE, FOLIO_NO, PRODUCT_NAME, AMC_CODE, AMT_PURCHASED,
    UNITS_PURCHASED, AMT_REDEMPTION, UNITS_REDEEMED, NET_UNITS, AUM, PROFIT_LOSS,
    CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON
)
VALUES
    ('98251983', 2, 1500000.00, 'FOLIO123456', 'ABC Fund', 'AMC001', 1000000.00, 50000.00,
    200000.00, 10000.00, 40000.00, 1000000.00, 50000.00, 'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP),

    ('98251984', 3, 2500000.00, 'FOLIO654321', 'XYZ Fund', 'AMC002', 2000000.00, 100000.00,
    300000.00, 20000.00, 50000.00, 2000000.00, 80000.00, 'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP);
    
-- Inserting data into mf_details_others table
INSERT INTO rel.mf_details_others (
    CRN, NUMBER_OF_MF, TOTAL_BALANCE, CODE, COD_PRODUCT, NM_SCHEME, AMOUNT, SOP_PERCENT,
    CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON
)
VALUES
    ('98251983', 1, 500000.00, 'CODE001', 'MF Product 1', 'Growth Plan', 300000.00, '10%',
    'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP),

    ('98251984', 2, 800000.00, 'CODE002', 'MF Product 2', 'Dividend Plan', 500000.00, '5%',
    'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP);

-- Inserting data into insurance_details table
INSERT INTO rel.insurance_details (
    CRN, NUMBER_OF_INS, CURR_BALANCE, PDR_DT, POLICY_NUMBER, PRODUCT, PRODUCT_DESCRIPTION,
    SUM_ASSURED, BASIC_CPI, TERM, PREMIUM_PAYING_TERM, PREMIUM_LTD_WITHOUT_ST, CREATED_BY,
    CREATED_ON, UPDATED_BY, UPDATED_ON
)
VALUES
    ('98251983', 1, 1000000.00, CURRENT_TIMESTAMP, 'POLICY12345', 'Life Insurance', 'Term Life Policy',
    5000000.00, 1500000.00, 20, 10, 2000000.00, 'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP);

package com.kotak.reliability.entity;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.sql.Timestamp;

@Entity
@Table(name = "demat_details", schema = "rel")
public class DematDetails {

    @Id
    @Column(name = "CRN", nullable = false)
    private String crn;

    @Column(name = "NUMBER_OF_DEMAT", nullable = false)
    private Integer numberOfDemat;

    @Column(name = "TOTAL_HOLDING_VALUE", nullable = false)
    private BigDecimal totalHoldingValue;

    @Column(name = "TRADING_ACCOUNT_OPEN_DATE", nullable = false)
    private Timestamp tradingAccountOpenDate;

    @Column(name = "LOC_CODE", nullable = false)
    private String locCode;

    @Column(name = "IS_OFFLINE_ONLINE", nullable = false)
    private Integer isOfflineOnline;

    @Column(name = "DP_ID", nullable = false)
    private String dpId;

    @Column(name = "DEMANT_ACCOUNT_NUMBER", nullable = false)
    private String demantAccountNumber;

    @Column(name = "SOURCING_COMPANY", nullable = false)
    private String sourcingCompany;

    @Column(name = "CLIENT_ACTIVE_STATUS", nullable = false)
    private String clientActiveStatus;

    @Column(name = "DEMANT_ACTIVATION_DATE", nullable = false)
    private Timestamp demantActivationDate;

    @Column(name = "HOLDING_VALUE", nullable = false)
    private BigDecimal holdingValue;

    @Column(name = "CREATED_BY", nullable = false)
    private String createdBy;

    @Column(name = "CREATED_ON", nullable = false)
    private Timestamp createdOn;

    @Column(name = "UPDATED_BY", nullable = false)
    private String updatedBy;

    @Column(name = "UPDATED_ON", nullable = false)
    private Timestamp updatedOn;

    // Getters and setters can be generated by Lombok or manually added if needed

}


-- Inserting data into demat_details table
INSERT INTO rel.demat_details (
    CRN, NUMBER_OF_DEMAT, TOTAL_HOLDING_VALUE, TRADING_ACCOUNT_OPEN_DATE, LOC_CODE, IS_OFFLINE_ONLINE,
    DP_ID, DEMANT_ACCOUNT_NUMBER, SOURCING_COMPANY, CLIENT_ACTIVE_STATUS, DEMANT_ACTIVATION_DATE,
    HOLDING_VALUE, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON
)
VALUES
    ('98251983', 1, 1000000.00, CURRENT_TIMESTAMP, 'LOC001', 1, 'DP001', 'DEMANT123456', 'Company1', 'ACTIVE', CURRENT_TIMESTAMP, 500000.00, 'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP),
    ('98251984', 2, 2000000.00, CURRENT_TIMESTAMP, 'LOC002', 0, 'DP002', 'DEMANT654321', 'Company2', 'INACTIVE', CURRENT_TIMESTAMP, 1500000.00, 'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP);


package com.kotak.reliability.entity;

import jakarta.persistence.*;
import java.sql.Timestamp;

@Entity
@Table(name = "service_requests", schema = "rel")
public class ServiceRequests {

    @Id
    @Column(name = "CRN", nullable = false)
    private String crn;

    @Column(name = "MONTH_ID", nullable = false)
    private Integer monthId;

    @Column(name = "SR_TICKET_ID", nullable = false)
    private String srTicketId;

    @Column(name = "TITLE", nullable = false)
    private String title;

    @Column(name = "SUB_TYPE", nullable = false)
    private String subType;

    @Column(name = "NATURE", nullable = false)
    private String nature;

    @Column(name = "PRIORITY", nullable = false)
    private String priority;

    @Column(name = "STATUS", nullable = false)
    private String status;

    @Column(name = "CHANNEL", nullable = false)
    private String channel;

    @Column(name = "SR_CREATION_DATE", nullable = false)
    private Timestamp srCreationDate;

    @Column(name = "CREATED_BY", nullable = false)
    private String createdBy;

    @Column(name = "CREATED_ON", nullable = false)
    private Timestamp createdOn;

    @Column(name = "UPDATED_BY", nullable = false)
    private String updatedBy;

    @Column(name = "UPDATED_ON", nullable = false)
    private Timestamp updatedOn;

    // Getters and setters can be generated by Lombok or manually added if needed

}

-- Inserting data into service_requests table
INSERT INTO rel.service_requests (
    CRN, MONTH_ID, SR_TICKET_ID, TITLE, SUB_TYPE, NATURE, PRIORITY, STATUS, CHANNEL,
    SR_CREATION_DATE, CREATED_BY, CREATED_ON, UPDATED_BY, UPDATED_ON
)
VALUES
    ('98251983', 1, 'SR123456', 'Account Issue', 'Type1', 'General', 'High', 'Open', 'Online',
    CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP),
    ('98251984', 2, 'SR654321', 'Card Request', 'Type2', 'Urgent', 'Medium', 'Closed', 'Mobile',
    CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP);


   

